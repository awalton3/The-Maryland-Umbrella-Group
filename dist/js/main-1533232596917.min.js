(function(angular){
'use strict';
angular
    .module('root', [
    'common',
    'components',
    'templates'
  ]);
})(window.angular);
(function(angular){
'use strict';
angular
  .module('common', [
    'ui.router',
    'ngMaterial',
    'ngMessages',
  ]);
})(window.angular);
(function(angular){
'use strict';
angular
    .module('components', [
    'components.auth',
    'components.memos'
  ])
})(window.angular);
(function(angular){
'use strict';
/**
 *
 * @ngdoc object
 * @name components.auth
 *
 * @requires ui.router,ngParse,ngMaterial,ngMessages
 *
 * @description
 *
 * This is the auth module. It includes login, register, and reset components for auth feature.
 *
 **/

angular
    .module('components.auth', [
    'ui.router',
    'ngParse',
    'ngMaterial',
    'ngMessages'
  ])
    .config(["ParseProvider", function (ParseProvider) {
        var MY_PARSE_APP_ID = 'uDzN7E7NYIbwdzKLUwNBtDtGfxyxrrBo3C6xGri3';
        var MY_PARSE_JS_KEY = '0VcWEWBLIwEcExM2Nz3TziSGjKiMsoU7SNjI5RPA';
        ParseProvider.initialize(MY_PARSE_APP_ID, MY_PARSE_JS_KEY);
        ParseProvider.serverURL = 'https://parseapi.back4app.com/';

    }])
    .run(["$transitions", "$state", "AuthService", function ($transitions, $state, AuthService) {
        $transitions.onStart({
            to: function (state) {
                return !!(state.data && state.data.requiredAuth);
            }
        }, function () {
            return AuthService
                .requireAuthentication()
                .catch(function () {
                    return $state.target('auth');
                });
        });
        $transitions.onStart({
            to: 'auth'
        }, function () {
            if (AuthService.isAuthenticated()) {
                return $state.go('app');
            }
        });
    }]);
})(window.angular);
(function(angular){
'use strict';
angular
    .module('components.memos', [
    'ui.router'
  ]);
})(window.angular);
(function(angular){
'use strict';
var root = {
    templateUrl: './root.html'
};

angular
    .module('root')
    .component('root', root);
})(window.angular);
(function(angular){
'use strict';
var app = {
    templateUrl: './app.html',
    controller: 'AppController'
};

angular
    .module('common')
    .component('app', app)
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('app', {
                redirectTo: 'memos',
                url: '/',
                data: {
                    requiredAuth: true
                },
                component: 'app'
            })
    }]);
})(window.angular);
(function(angular){
'use strict';
AppController.$inject = ["AuthService", "$state"];
function AppController(AuthService, $state) {
    var ctrl = this;
    ctrl.user = AuthService.getUser();
    ctrl.logout = function () {
        AuthService.logout()
            .then(function () {
                $state.go('auth.login');
            });
    };
}

angular
    .module('common')
    .controller('AppController', AppController);
})(window.angular);
(function(angular){
'use strict';
init.$inject = ["$rootScope", "$uiRouter", "$mdSidenav"];
function init($rootScope, $uiRouter, $mdSidenav) {
    var Visualizer = window['ui-router-visualizer'].Visualizer;
    var pluginInstance = $uiRouter.plugin(Visualizer);

    $rootScope.toggleMenu = toggleMenu;

    function toggleMenu(navId) {
        console.log('toggle sidenav: ' + navId);
        $mdSidenav(navId)
            .toggle();
    }
}

angular
    .module('common')
    .run(init)
})(window.angular);
(function(angular){
'use strict';
var auth = {
    templateUrl: './auth.html',
    controller: 'AuthController'
};

angular
    .module('components.auth')
    .component('auth', auth)
    .config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        $stateProvider
            // .state('auth', {
            //     redirectTo: 'auth',
            //     url: '/auth',
            //     templateUrl: './auth.html'
            // })
            .state('auth', {
                url: '/auth',
                component: 'auth'
            });
         $urlRouterProvider.otherwise('/auth');
    }]);
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc service
 * @name components.auth:AuthService
 *
 * @description Handles authentication for app
 */

AuthService.$inject = ["Parse"];
function AuthService(Parse) {
    var auth = new Parse.User(); // creates a new user in Parse
    var currentUser = null; //holds info about current user

    /**
     * @ngdoc method
     * @name AuthService#storeAuthData
     * @methodOf components.auth:AuthService
     * @param {object} obj Parse user object
     * @returns {object} returns currentUser object
     */

    function storeAuthData(response) {
        currentUser = response;
        return currentUser;
    }

    /**
     * @ngdoc method
     * @name AuthService#clearAuthData
     * @methodOf components.auth:AuthService
     * @returns {object} returns a blank user object
     */

    function clearAuthData() {
        currentUser = Parse.User.current(); // this will now be null
        return currentUser;
    }

    /**
     * @ngdoc method
     * @name AuthService#login
     * @methodOf components.auth:AuthService
     * @param {object} obj user data from auth-form
     * @returns {object} returns the current user object
     */

    this.login = function (user) {
        return Parse.User
            .logIn(user.email, user.password, {
                success: function (auth) {},
                error: function (auth, error) {
                    console.log(error);
                }
            })
            .then(storeAuthData)
            .then((currentUser) => {
                sessionStorage.setItem('currentUser', currentUser)
            });

    };

    /**
     * @ngdoc method
     * @name AuthService#register
     * @methodOf components.auth:AuthService
     * @param {object} obj user data from auth-form
     * @returns {object} returns the current user object
     */

    this.register = function (user) {
        //console.log("User: ", user);
        auth.set("username", user.email);
        auth.set("password", user.password);
        auth.set("email", user.email);
        return auth
            .signUp(null, {
                success: function (auth) {},
                error: function (auth, error) {
                    alert("Error: " + error.code + " " + error.message);
                }
            })
            .then(storeAuthData);
    };

    /**
     * @ngdoc method
     * @name AuthService#logout
     * @methodOf components.auth:AuthService
     * @returns {object} returns an empty user object
     */

    this.logout = function () {
        return Parse.User.logOut()
            .then(clearAuthData);
    };

    /**
     * @ngdoc method
     * @name AuthService#requireAuthentication
     * @methodOf components.auth:AuthService
     * @returns {promise} returns resolve or reject based on user authentication
     */

    this.requireAuthentication = function () {
        return new Promise(function (resolve, reject) {
            if (!!Parse.User.current() && Parse.User.current()
                .authenticated()) {
                resolve();
            } else {
                reject();
            }
        });
    }

    /**
     * @ngdoc method
     * @name AuthService#isAuthenticated
     * @methodOf components.auth:AuthService
     * @returns {boolean} returns whether user is authenticated based on sessionStorage
     */

    this.isAuthenticated = function () {
        // return !!(Parse.User.current() && Parse.User.current()
        //     .authenticated());
    };

    /**
     * @ngdoc method
     * @name AuthService#getUser
     * @methodOf components.auth:AuthService
     * @returns {object} returns currentUser sessionStorage object
     */

    this.getUser = function () {
        if (auth) {
            return auth;
        }
    };
};

angular
    .module('components.auth')
    .service('AuthService', AuthService);
})(window.angular);
(function(angular){
'use strict';
var memos = {
    templateUrl: './memos.html',
    controller: 'MemosController',
    bindings: {}
}

angular
    .module('components.memos')
    .component('memos', memos)
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider.state('memos', {
            parent: 'app',
            url: 'memos',
            component: 'memos'
        })
    }]);
})(window.angular);
(function(angular){
'use strict';
MemosController.$inject = ["$state"];
function MemosController($state) {

    var ctrl = this;
    ctrl.$onInit = function () {

    }

}


angular
    .module('components.memos')
    .controller('MemosController', MemosController);
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc component
 * @name component.auth:authForm
 *
 * @description
 * This is the stateless component for auth form
 *
 * @example
 * login.htm
 <pre>
 <auth-form user="$ctrl.user" button="Login" on-submit="$ctrl.loginUser($event);" on-reset="$ctrl.goToReset();">
 </auth-form>
  </pre>
 *
 */

var authForm = {
    bindings: {
        user: '<',
        button: '@',
        message: '@',
        onSubmit: '&',
        onReset: '&'
    },
    templateUrl: './auth-form.html',
    controller: 'AuthFormController'
};

angular
    .module('components.auth')
    .component('authForm', authForm);
})(window.angular);
(function(angular){
'use strict';
AuthFormController.$inject = ["$state"];
function AuthFormController($state) {
  var ctrl = this;

  ctrl.$onChanges = function (changes) {
    if (changes.user) {
      ctrl.user = angular.copy(ctrl.user);
    }
  };

  ctrl.submitForm = function () {
    //console.log("submit called");
    ctrl.onSubmit({
      $event: {
        user: ctrl.user
      }
    });
  };
}

angular
    .module('components.auth')
    .controller('AuthFormController', AuthFormController);
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc component
 * @name component.auth:login
 *
 * @description
 * This component stores info from auth-form and handles login using AuthService
 *
 */

var login = {
    templateUrl: './login.html',
    controller: 'LoginController'
};

angular
    .module('components.auth')
    .component('login', login)
    .config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        $stateProvider
            // .state('auth', {
            //     redirectTo: 'auth.login',
            //     url: '/auth',
            //     template: '<div ui-view></div>'
            // })
            .state('auth.login', {
                url: '/login',
                component: 'login'
            });
        // $urlRouterProvider.otherwise('/auth/login');
    }]);
})(window.angular);
(function(angular){
'use strict';
LoginController.$inject = ["AuthService", "$state"];
function LoginController(AuthService, $state) {
    var ctrl = this;

    //initialize user data
    ctrl.$onInit = function () {
        ctrl.user = {
            email: '',
            password: ''
        };
    };

  //give user access to app
  ctrl.loginUser = function (event) {
    return AuthService
      .login(event.user)
      .then(function () {
        $state.go('app');
      }, function (reason) {
        alert(reason);
      });
  };

  ctrl.goToReset = function () {
    $state.go('auth.reset');
  }

}

angular
    .module('components.auth')
    .controller('LoginController', LoginController);
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc component
 * @name component.auth:register
 *
 * @description
 * This component stores info from auth-form and handles registering using AuthService
 *
 */

var register = {
    templateUrl: './register.html',
    controller: 'RegisterController'
};

angular
    .module('components.auth')
    .component('register', register)
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider.state('auth.register', {
            url: '/register',
            component: 'register'
        });
    }]);
})(window.angular);
(function(angular){
'use strict';
RegisterController.$inject = ["AuthService", "$state"];
function RegisterController(AuthService, $state) {
    var ctrl = this;

    //initialize user data
    ctrl.$onInit = function () {
        ctrl.error = null;
        ctrl.user = {
            email: '',
            password: ''
        };
    };

    //creates a new user and allows access into the app
    ctrl.createUser = function (event) {
        //console.log("user:", event);
        return AuthService
            .register(event.user)
            .then(function () {
                $state.go('app');
            }, function (reason) {
                ctrl.error = reason.message;
            });
    };

}

angular
    .module('components.auth')
    .controller('RegisterController', RegisterController);
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc component
 * @name component.auth:reset
 *
 * @description
 * This component handles password reset and is toggled in login component 
 *
 */

var reset = {
    templateUrl: './reset.html',
    controller: 'ResetController'
};

angular
    .module('components.auth')
    .component('reset', reset)
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider.state('auth.reset', {
            url: '/reset',
            component: 'reset'
        });
    }]);
})(window.angular);
(function(angular){
'use strict';
function ResetController() {

    var ctrl = this;

    ctrl.$onInit = function () {
      console.log("RESET CONTROLLER FIRED")
        // initialize variables
        ctrl.user = {};
        // initialize functions
        ctrl.reset = reset;
    }

    // password reset
    function reset(email) {
        if (email) {
            Parse
                .User
                .requestPasswordReset(email)
                .then(function () {
                    alert('A password reset email has been sent to ' + email);
                })
                .catch(function (err) {
                    alert(err.code + " " + err.message);
                });
        }
    }

}

angular
    .module('components.auth')
    .controller('ResetController', ResetController);
})(window.angular);
(function(angular){
'use strict';
angular.module('templates', []).run(['$templateCache', function($templateCache) {$templateCache.put('./root.html','<div class="root">\n    <div ui-view></div>\n</div>\n');
$templateCache.put('./app.html','<div class="root">\n    <!-- <app-nav user="$ctrl.user" on-logout="$ctrl.logout();"></app-nav> -->\n    <!-- <md-sidenav flex-order="2" md-component-id="side" md-whiteframe="3" md-disable-backdrop class="md-sidenav-right md-no-pagination app__sidenav--height app__sidenav--width app__sidenav--position app__sidenav--overflow-x">\n        <div ui-view="side"></div>\n    </md-sidenav> -->\n    <div>\n        <div ui-view></div>\n    </div>\n</div>\n');
$templateCache.put('./auth.html','<div>\n  Hello World\n</div>\n');
$templateCache.put('./memos.html','<div>\n  This is the app.\n</div>\n');
$templateCache.put('./auth-form.html','<form width="100%" name="authForm" novalidate ng-submit="$ctrl.submitForm();">\n  <div width="100%" layout="column" layout-align="center center">\n    <div>\n      <img src="img/mughub_logo.png" width="210px" />\n    </div>\n    <div style="min-width:25%">\n\n      <md-list>\n        <md-list-item class="auth__listItem--marginTop">\n          <md-input-container class="md-block" layout-fill>\n            <label style="color:  #eaeaea; font-size: 13px; font-family: \'Montserrat\', sans-serif; padding: 5px 0px 0px 20px"><i style="vertical-align: middle; color:#eaeaea; margin:0px 4px 1px 4px" class="material-icons md-18">person</i>USERNAME</label>\n            <input class="auth__input--style auth__input--height" type="email" name="email" ng-model="$ctrl.user.email" autocomplete="off" />\n          </md-input-container>\n        </md-list-item>\n        <md-list-item layout-align="center center" layout="row" class="auth__listItem--marginTop">\n          <md-input-container md-no-float class="md-block auth__input" style="position: relative; width:100%">\n            <label style="color:  #eaeaea; font-size: 13px; font-family: \'Montserrat\', sans-serif; padding: 5px 0px 0px 20px"><i style="vertical-align: middle; color:#eaeaea; margin:0px 4px" class="material-icons md-18">lock</i> PASSWORD</label>\n            <input class="auth__input--style auth__input--height" type="password" name="password" ng-model="$ctrl.user.password" autocomplete="off" />\n          </md-input-container>\n          <p ng-if="$ctrl.button === \'Login\'" ng-click="$ctrl.onReset($event)" class="auth__forgot">?</p>\n        </md-list-item>\n      </md-list>\n\n    </div>\n    <div style="margin-top: -18px;">\n      <md-button type="submit" ng-disabled="authForm.$invalid" class="md-raised auth__button auth__input--height">\n        <h1 class="auth__buttonText">{{ $ctrl.button }}</h1>\n      </md-button>\n    </div>\n  </div>\n</form>\n');
$templateCache.put('./login.html','<div class="auth" layout="column" layout-align="center">\n    <div>\n        <auth-form user="$ctrl.user" button="Login" on-submit="$ctrl.loginUser($event);" on-reset="$ctrl.goToReset();">\n        </auth-form>\n    </div>\n    <center>\n        <div>\n            <a ui-sref="auth.register" class="auth__trans">\n      Don\'t have an account? Create one here.\n    </a>\n        </div>\n    </center>\n</div>\n');
$templateCache.put('./register.html','<div class="auth" layout="column" layout-align="center">\n    <div>\n        <auth-form user="$ctrl.user" message="{{ $ctrl.error }}" button="Create user" on-submit="$ctrl.createUser($event);">\n        </auth-form>\n    </div>\n    <center>\n        <div>\n            <a ui-sref="auth.login" class="auth__trans">Already have an account? Login here.</a>\n        </div>\n    </center>\n</div>\n');
$templateCache.put('./reset.html','<div class="auth" layout="column" layout-align="center">\n    <form width="100%" name="authForm" novalidate ng-submit="$ctrl.reset($ctrl.user.email)">\n        <div width="100%" layout="column" layout-align="center center">\n            <div>\n                <img src="img/2000px-General_Electric_logo.svg.png" width="50px" />\n            </div>\n            <div style="min-width:25%">\n                <md-list>\n                    <md-list-item>\n                        <md-input-container class="md-block" layout-fill>\n                            <label>Email</label>\n                            <input type="email" name="email" ng-model="$ctrl.user.email" autocomplete="off" />\n                        </md-input-container>\n                    </md-list-item>\n                </md-list>\n            </div>\n            <div>\n                <md-button type="submit" ng-disabled="authForm.$invalid" class="md-raised auth__button">\n                    <h1 class="auth__buttonText">RESET</h1>\n                </md-button>\n            </div>\n        </div>\n    </form>\n    <center>\n        <div>\n            <a ui-sref="auth.login" class="auth__trans">Or login with an existing account.</a>\n        </div>\n    </center>\n</div>\n');}]);})(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
