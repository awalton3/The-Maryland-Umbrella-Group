(function(angular){
'use strict';
angular
    .module('root', [
    'common',
    'components',
    'templates'
  ]);
})(window.angular);
(function(angular){
'use strict';
angular
  .module('common', [
    'ui.router',
    'ngMaterial',
    'ngMessages',
  ]);
})(window.angular);
(function(angular){
'use strict';
angular
    .module('components', [
    'components.auth',
    'components.memos'
  ])
})(window.angular);
(function(angular){
'use strict';
/**
 *
 * @ngdoc object
 * @name components.auth
 *
 * @requires ui.router,ngParse,ngMaterial,ngMessages
 *
 * @description
 *
 * This is the auth module. It includes login, register, and reset components for auth feature.
 *
 **/

angular
    .module('components.auth', [
    'ui.router',
    'ngParse',
    'ngMaterial',
    'ngMessages'
  ])
    .config(["ParseProvider", function (ParseProvider) {
        var MY_PARSE_APP_ID = 'uDzN7E7NYIbwdzKLUwNBtDtGfxyxrrBo3C6xGri3';
        var MY_PARSE_JS_KEY = '0VcWEWBLIwEcExM2Nz3TziSGjKiMsoU7SNjI5RPA';
        ParseProvider.initialize(MY_PARSE_APP_ID, MY_PARSE_JS_KEY);
        ParseProvider.serverURL = 'https://parseapi.back4app.com/';

    }])
    .run(["$transitions", "$state", "AuthService", function ($transitions, $state, AuthService) {
        $transitions.onStart({
            to: function (state) {
                return !!(state.data && state.data.requiredAuth);
            }
        }, function () {
            return AuthService
                .requireAuthentication()
                .catch(function () {
                    return $state.target('auth');
                });
        });
        $transitions.onStart({
            to: 'auth'
        }, function () {
            if (AuthService.isAuthenticated()) {
                return $state.go('app');
            }
        });
    }]);
})(window.angular);
(function(angular){
'use strict';
angular
    .module('components.memos', [
    'ui.router'
  ]);
})(window.angular);
(function(angular){
'use strict';
var root = {
    templateUrl: './root.html'
};

angular
    .module('root')
    .component('root', root);
})(window.angular);
(function(angular){
'use strict';
var app = {
    templateUrl: './app.html',
    controller: 'AppController'
};

angular
    .module('common')
    .component('app', app)
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider
            .state('app', {
                redirectTo: 'memos',
                url: '/',
                data: {
                    requiredAuth: true
                },
                component: 'app'
            })
    }]);
})(window.angular);
(function(angular){
'use strict';
AppController.$inject = ["AuthService", "$state"];
function AppController(AuthService, $state) {
    var ctrl = this;
    ctrl.user = AuthService.getUser();
    ctrl.logout = function () {
        AuthService.logout()
            .then(function () {
                $state.go('auth.login');
            });
    };
}

angular
    .module('common')
    .controller('AppController', AppController);
})(window.angular);
(function(angular){
'use strict';
init.$inject = ["$rootScope", "$uiRouter", "$mdSidenav"];
function init($rootScope, $uiRouter, $mdSidenav) {
    var Visualizer = window['ui-router-visualizer'].Visualizer;
    var pluginInstance = $uiRouter.plugin(Visualizer);

    $rootScope.toggleMenu = toggleMenu;

    function toggleMenu(navId) {
        console.log('toggle sidenav: ' + navId);
        $mdSidenav(navId)
            .toggle();
    }
}

angular
    .module('common')
    .run(init)
})(window.angular);
(function(angular){
'use strict';
var auth = {
    templateUrl: './auth.html',
    controller: 'AuthController'
};

angular
    .module('components.auth')
    .component('auth', auth)
    .config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        $stateProvider
            // .state('auth', {
            //     redirectTo: 'auth',
            //     url: '/auth',
            //     templateUrl: './auth.html'
            // })
            .state('auth', {
                url: '/auth',
                component: 'auth'
            });
         $urlRouterProvider.otherwise('/auth');
    }]);
})(window.angular);
(function(angular){
'use strict';
AuthController.$inject = ["$state"];
function AuthController($state) {
    var ctrl = this;

    ctrl.$onInit = function() {
      // define variables
      ctrl.showRegister = false;
      ctrl.showReset = false;
      ctrl.showLogin = true;

      // define functions
      ctrl.toggleRegister = toggleRegister;
      ctrl.toggleReset = toggleReset;
      ctrl.toggleLogin = toggleLogin;
    }

    function toggleRegister() {
      ctrl.showRegister = !ctrl.showRegister;
      ctrl.showLogin = !ctrl.showLogin;

    }

    function toggleReset(event) {
      ctrl.userEmail = event.email;
      ctrl.showReset = !ctrl.showReset;
      ctrl.showLogin = !ctrl.showLogin;
    }

    function toggleLogin() {
      ctrl.showLogin = !ctrl.showLogin;
      ctrl.showReset = !ctrl.showReset;

    }

    

}

angular
    .module('components.auth')
    .controller('AuthController', AuthController);
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc service
 * @name components.auth:AuthService
 *
 * @description Handles authentication for app
 */

AuthService.$inject = ["Parse", "$state"];
function AuthService(Parse, $state) {
  var auth = new Parse.User(); // creates a new user in Parse
  var currentUser = null; //holds info about current user

  /**
   * @ngdoc method
   * @name AuthService#storeAuthData
   * @methodOf components.auth:AuthService
   * @param {object} obj Parse user object
   * @returns {object} returns currentUser object
   */

  function storeAuthData(response) {
    currentUser = response;
    return currentUser;
  }

  /**
   * @ngdoc method
   * @name AuthService#clearAuthData
   * @methodOf components.auth:AuthService
   * @returns {object} returns a blank user object
   */

  function clearAuthData() {
    currentUser = Parse.User.current(); // this will now be null
    return currentUser;
  }

  /**
   * @ngdoc method
   * @name AuthService#login
   * @methodOf components.auth:AuthService
   * @param {object} obj user data from auth-form
   * @returns {object} returns the current user object
   */

  this.login = function(user) {
    let userType = user.type
    return Parse.User
      .logIn(user.email, user.password)
      .then(user => {
        if (user.attributes.emailVerified && user.attributes.type === userType) {
          console.log(userType);
          console.log(user)
          storeAuthData()
          $state.go('app')
        } else {
          this.logout()
            .then(() => {
              alert('Please verify email address or ensure you are logging in as the correct user type');
            })
        }
      })
      .catch(error => alert(error))
  };

  /**
   * @ngdoc method
   * @name AuthService#register
   * @methodOf components.auth:AuthService
   * @param {object} obj user data from auth-form
   * @returns {object} returns the current user object
   */

  this.register = function(user) {
    //console.log("User: ", user);
    auth.set("username", user.email);
    auth.set("firstname", user.firstname);
    auth.set("lastname", user.lastname);
    auth.set("password", user.password);
    auth.set("email", user.email);
    auth.set("type", user.type)
    return auth
      .signUp(null)
      .then(() => {
        alert("A verfication email has been sent to " + user.email)
        this.logout()
          .then(() => {
            $state.go('auth.login')
          })
      })
      .catch(error => alert(error))
  };

  /**
   * @ngdoc method
   * @name AuthService#logout
   * @methodOf components.auth:AuthService
   * @returns {object} returns an empty user object
   */

  this.logout = function() {
    return Parse.User.logOut()
      .then(clearAuthData);
  };

  /**
   * @ngdoc method
   * @name AuthService#requireAuthentication
   * @methodOf components.auth:AuthService
   * @returns {promise} returns resolve or reject based on user authentication
   */

  this.requireAuthentication = function() {
    return new Promise(function(resolve, reject) {
      if (!!Parse.User.current() && Parse.User.current()
        .authenticated()) {
        resolve();
      } else {
        reject();
      }
    });
  }

  /**
   * @ngdoc method
   * @name AuthService#isAuthenticated
   * @methodOf components.auth:AuthService
   * @returns {boolean} returns whether user is authenticated based on sessionStorage
   */

  this.isAuthenticated = function() {
    // return !!(Parse.User.current() && Parse.User.current()
    //     .authenticated());
  };

  /**
   * @ngdoc method
   * @name AuthService#getUser
   * @methodOf components.auth:AuthService
   * @returns {object} returns currentUser sessionStorage object
   */

  this.getUser = function() {
    if (auth) {
      return auth;
    }
  };
};

angular
  .module('components.auth')
  .service('AuthService', AuthService);
})(window.angular);
(function(angular){
'use strict';
var memos = {
    templateUrl: './memos.html',
    controller: 'MemosController',
    bindings: {}
}

angular
    .module('components.memos')
    .component('memos', memos)
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider.state('memos', {
            parent: 'app',
            url: 'memos',
            component: 'memos'
        })
    }]);
})(window.angular);
(function(angular){
'use strict';
MemosController.$inject = ["$state"];
function MemosController($state) {

    var ctrl = this;
    ctrl.$onInit = function () {

    }

}


angular
    .module('components.memos')
    .controller('MemosController', MemosController);
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc component
 * @name component.auth:authForm
 *
 * @description
 * This is the stateless component for auth form
 *
 * @example
 * login.htm
 <pre>
 <auth-form user="$ctrl.user" button="Login" on-submit="$ctrl.loginUser($event);" on-reset="$ctrl.goToReset();">
 </auth-form>
  </pre>
 *
 */

var authForm = {
    bindings: {
        user: '<',
        userType: '<',
        button: '@',
        message: '@',
        onSubmit: '&',
        onReset: '&'
    },
    templateUrl: './auth-form.html',
    controller: 'AuthFormController'
};

angular
    .module('components.auth')
    .component('authForm', authForm);
})(window.angular);
(function(angular){
'use strict';
AuthFormController.$inject = ["$state"];
function AuthFormController($state) {
  var ctrl = this;

  ctrl.$onChanges = function(changes) {
    if (changes.user) {
      ctrl.user = angular.copy(ctrl.user);
    }
  };

  ctrl.submitForm = function() {
    //console.log("submit called");
    ctrl.onSubmit({
      $event: {
        user: ctrl.user
      }
    });
  };

  ctrl.reset = function() {
    ctrl.onReset({
      $event: {
        email: ctrl.user.email
      }
    });
  };
}

angular
  .module('components.auth')
  .controller('AuthFormController', AuthFormController);
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc component
 * @name component.auth:login
 *
 * @description
 * This component stores info from auth-form and handles login using AuthService
 *
 */

var login = {
    templateUrl: './login.html',
    controller: 'LoginController',
    bindings: {
      userType: '@',
      onRegister: '&',
      onReset: '&'
    }
};

angular
    .module('components.auth')
    .component('login', login);
    // .config(function ($stateProvider, $urlRouterProvider) {
    //     $stateProvider
    //         // .state('auth', {
    //         //     redirectTo: 'auth.login',
    //         //     url: '/auth',
    //         //     template: '<div ui-view></div>'
    //         // })
            // .state('auth.login', {
            //     url: '/login',
            //     component: 'login'
            // });
    //     // $urlRouterProvider.otherwise('/auth/login');
    // });
})(window.angular);
(function(angular){
'use strict';
LoginController.$inject = ["AuthService", "$state"];
function LoginController(AuthService, $state) {
  var ctrl = this;

  //initialize user data
  ctrl.$onInit = function() {
    ctrl.user = {
      email: '',
      password: '',
      type: ctrl.userType
    };
  };

  //give user access to app
  ctrl.loginUser = function (event) {
      return AuthService
          .login(event.user)
  }

  ctrl.reset = function(event) {
    console.log(event.email)
    ctrl.onReset({
      $event: {
        email: event.email
      }
    });
  };

}

angular
  .module('components.auth')
  .controller('LoginController', LoginController);
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc component
 * @name component.auth:register
 *
 * @description
 * This component stores info from auth-form and handles registering using AuthService
 *
 */

var register = {
    templateUrl: './register.html',
    controller: 'RegisterController',
    bindings: {
      userType: '@',
      onLogin: '&'
    }
};

angular
    .module('components.auth')
    .component('register', register);
    // .config(function ($stateProvider) {
    //     $stateProvider.state('auth.register', {
    //         url: '/register',
    //         component: 'register'
    //     });
    // });
})(window.angular);
(function(angular){
'use strict';
RegisterController.$inject = ["AuthService", "$state"];
function RegisterController(AuthService, $state) {
    var ctrl = this;

    //initialize user data
    ctrl.$onInit = function () {
        ctrl.error = null;
        ctrl.user = {
            email: '',
            password: '',
            type: ctrl.userType
        };
    };

    //creates a new user and allows access into the app
    ctrl.createUser = function (event) {
        return AuthService
            .register(event.user)
            // .alertVerification(event.user.email)
    };

}

angular
    .module('components.auth')
    .controller('RegisterController', RegisterController);
})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc component
 * @name component.auth:reset
 *
 * @description
 * This component handles password reset and is toggled in login component
 *
 */

var reset = {
    templateUrl: './reset.html',
    controller: 'ResetController',
    bindings: {
      onLogin: '&',
      userType: '@',
      userEmail: '<'
    }
};

angular
    .module('components.auth')
    .component('reset', reset);
    // .config(function ($stateProvider) {
    //     $stateProvider.state('auth.reset', {
    //         url: '/reset',
    //         component: 'reset'
    //     });
    // });
})(window.angular);
(function(angular){
'use strict';
function ResetController() {

    var ctrl = this;

    ctrl.$onInit = function () {
      console.log("RESET CONTROLLER FIRED")
        // initialize variables
        ctrl.user = {};
        // initialize functions
        ctrl.reset = reset;
    }

    // password reset
    function reset(email) {
        if (email) {
            Parse
                .User
                .requestPasswordReset(email)
                .then(function () {
                    alert('A password reset email has been sent to ' + email);
                })
                .catch(function (err) {
                    alert(err.code + " " + err.message);
                });
        }
    }

}

angular
    .module('components.auth')
    .controller('ResetController', ResetController);
})(window.angular);
(function(angular){
'use strict';
angular.module('templates', []).run(['$templateCache', function($templateCache) {$templateCache.put('./root.html','<div class="root">\n    <div ui-view></div>\n</div>\n');
$templateCache.put('./app.html','<div class="root">\n    <!-- <app-nav user="$ctrl.user" on-logout="$ctrl.logout();"></app-nav> -->\n    <!-- <md-sidenav flex-order="2" md-component-id="side" md-whiteframe="3" md-disable-backdrop class="md-sidenav-right md-no-pagination app__sidenav--height app__sidenav--width app__sidenav--position app__sidenav--overflow-x">\n        <div ui-view="side"></div>\n    </md-sidenav> -->\n    <div>\n        <div ui-view></div>\n    </div>\n</div>\n');
$templateCache.put('./auth.html','  <md-content class="background height--full width--full" layout="column" layout-align="center center">\n\n    <div>\n      <img src="img/mughub_logo.png" width="200px" />\n    </div>\n\n    <div class="width--full auth--animation ng-enter" style="margin-top: -30px;">\n      <md-tabs class="auth__tabContainer width--full md-no-animation" md-center-tabs="true" md-dynamic-height>\n\n        <md-tab label="STUDENT">\n          <md-content class="background auth--animation ng-enter">\n              <login ng-if="$ctrl.showLogin" on-register="$ctrl.toggleRegister()" on-reset="$ctrl.toggleReset($event)" user-type="STUDENT"></login>\n              <register ng-if="$ctrl.showRegister" on-login="$ctrl.toggleRegister()" user-type="STUDENT"></register>\n              <reset ng-if="$ctrl.showReset" on-login="$ctrl.toggleLogin()" user-type="STUDENT" user-email="$ctrl.userEmail"></reset>\n          </md-content>\n        </md-tab>\n\n        <md-tab label="TUTOR">\n          <md-content class="background auth--animation ng-enter">\n              <login ng-if="$ctrl.showLogin" on-register="$ctrl.toggleRegister()" on-reset="$ctrl.toggleReset($event)" user-type="TUTOR"></login>\n              <register ng-if="$ctrl.showRegister" on-login="$ctrl.toggleRegister()" user-type="TUTOR"></register>\n              <reset ng-if="$ctrl.showReset" on-login="$ctrl.toggleLogin()" user-type="TUTOR"  user-email="$ctrl.userEmail"></reset>\n          </md-content>\n        </md-tab>\n\n      </md-tabs>\n    </div>\n\n  </md-content>\n');
$templateCache.put('./memos.html','<div>\n  This is the app.\n</div>\n');
$templateCache.put('./auth-form.html','<form layout="column" layout-align="center center" name="authForm" novalidate ng-submit="$ctrl.submitForm();">\n  <md-list layout="column" layout-align="center center">\n\n    <div ng-if="$ctrl.button === \'Register\'">\n      <md-list-item layout="row" layout-align="space-between center">\n\n        <div>\n          <md-input-container layout="row" layout-align="center center" class="auth__input">\n            <label style="color:  #eaeaea; font-size: 13px; font-family: \'Montserrat\', sans-serif; padding: 3px 0px 0px 30px">FIRST NAME</label>\n            <input class="auth__input--styleNameLeft auth__input--height" type="text" name="firstname" ng-model="$ctrl.user.firstname" autocomplete="off" />\n          </md-input-container>\n        </div>\n\n        <div>\n          <md-input-container layout="row" layout-align="center center" class="auth__input">\n            <label style="color:  #eaeaea; font-size: 13px; font-family: \'Montserrat\', sans-serif; padding: 3px 0px 0px 35px">LAST NAME</label>\n            <input class="auth__input--styleNameRight auth__input--height" type="text" name="lastname" ng-model="$ctrl.user.lastname" autocomplete="off" />\n          </md-input-container>\n        </div>\n\n      </md-list-item>\n    </div>\n\n    <div class="auth__listItem--marginTop">\n      <md-list-item>\n        <md-input-container layout="row" layout-align="center center" class="auth__input">\n          <label style="color:  #eaeaea; font-size: 13px; font-family: \'Montserrat\', sans-serif; padding: 5px 0px 0px 20px"><i style="vertical-align: middle; color:#eaeaea; margin:0px 4px 1px 4px" class="material-icons md-18">email</i>EMAIL</label>\n          <input class="auth__input--style auth__input--height" type="email" name="email" ng-model="$ctrl.user.email" autocomplete="off" />\n        </md-input-container>\n      </md-list-item>\n    </div>\n\n    <div>\n      <md-list-item class="auth__listItem--marginTop">\n        <md-input-container layout="row" layout-align="center center" class="auth__input">\n          <label style="color:  #eaeaea; font-size: 13px; font-family: \'Montserrat\', sans-serif; padding: 5px 0px 0px 20px"><i style="vertical-align: middle; color:#eaeaea; margin:0px 4px" class="material-icons md-18">lock</i>PASSWORD</label>\n          <input class="auth__input--style auth__input--height" type="password" name="password" ng-model="$ctrl.user.password" autocomplete="off" />\n        </md-input-container>\n        <p ng-if="$ctrl.button === \'Login\'" ng-click="$ctrl.reset($event)" class="auth__forgot">?</p>\n      </md-list-item>\n    </div>\n\n    <div>\n      <md-list-item class="auth__listItem--marginTop">\n        <md-button type="submit" ng-disabled="authForm.$invalid" class="md-raised auth__button auth__input--height">\n          <h1 class="auth__buttonText">{{ $ctrl.button }} as a {{ $ctrl.userType }}</h1>\n        </md-button>\n      </md-list-item>\n    </div>\n\n\n  </md-list>\n</form>\n');
$templateCache.put('./login.html','<div layout="column" layout-align="center" class="auth--animation">\n    <div>\n        <auth-form user="$ctrl.user" user-type="$ctrl.userType" button="Login" on-submit="$ctrl.loginUser($event);" on-reset="$ctrl.reset($event)">\n        </auth-form>\n    </div>\n    <center>\n        <div>\n            <a ng-click="$ctrl.onRegister($event)" class="auth__trans">\n      Don\'t have an account? Create one here.\n    </a>\n        </div>\n    </center>\n</div>\n');
$templateCache.put('./register.html','<div layout="column" layout-align="center" class="auth--animation">\n    <div>\n        <auth-form user="$ctrl.user" user-type="$ctrl.userType" message="{{ $ctrl.error }}" button="Register" on-submit="$ctrl.createUser($event);">\n        </auth-form>\n    </div>\n    <center>\n        <div>\n            <a ng-click="$ctrl.onLogin($event)" class="auth__trans">Already have an account? Login here.</a>\n        </div>\n    </center>\n</div>\n');
$templateCache.put('./reset.html','<div layout="column" layout-align="center" class="auth--animation">\n  <div>\n    <form layout="column" layout-align="center center" name="authForm" novalidate ng-submit="$ctrl.reset($ctrl.userEmail)">\n      <md-list layout="column" layout-align="center center">\n\n        <div>\n          <md-list-item>\n            <md-input-container layout="row" layout-align="center center" class="auth__input">\n              <label style="color:  #eaeaea; font-size: 13px; font-family: \'Montserrat\', sans-serif; padding: 5px 0px 0px 20px"><i style="vertical-align: middle; color:#eaeaea; margin:0px 4px 1px 4px" class="material-icons md-18">email</i>EMAIL</label>\n              <input class="auth__input--style auth__input--height" type="email" name="email" ng-model="$ctrl.userEmail" autocomplete="off" />\n            </md-input-container>\n          </md-list-item>\n        </div>\n\n        <div>\n          <md-list-item class="auth__listItem--marginTop">\n            <md-button type="submit" ng-disabled="authForm.$invalid" class="md-raised auth__button auth__input--height">\n              <h1 class="auth__buttonText">RESET {{ $ctrl.userType }} ACOUNT</h1>\n            </md-button>\n          </md-list-item>\n        </div>\n\n      </md-list>\n    </form>\n  </div>\n  <center>\n    <div>\n      <a ng-click="$ctrl.onLogin($event)" class="auth__trans">Or login with an existing account.</a>\n    </div>\n  </center>\n</div>\n');}]);})(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
